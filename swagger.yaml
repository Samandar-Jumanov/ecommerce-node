openapi: 3.0.0
info:
  title: Ecommerce Node API
  version: 1.0.0
servers:
  - url: http://localhost:3001

 

paths:
  /customer/auth/signup:
    post:
      summary: User Registration
      description: Register a new user with the provided username, password, and email.
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  userId:
                    type: integer
                  token:
                    type: string
                  role:
                    type: string
              example:
                username: "john_doe"
                userId: 1
                token: "abc123"
                role: "customer"

  /customer/auth/login:
    post:
      summary: User Login
      description: Log in with the provided email and password.
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  userId:
                    type: integer
                  token:
                    type: string
                  message:
                    type: string
              example:
                username: "john_doe"
                userId: 1
                token: "newToken123"
                message: "Logged in successfully"

  /customer/auth/logout/{customerId}:
    put:
      summary: User Logout
      description: Log out the user with the specified customerId.
      parameters:
        - name: customerId
          in: path
          description: The ID of the user to log out.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              example:
                message: "Logged out successfully"

  /customer/auth/change-role:
    put:
      summary: Change User Role
      description: Change the role of a user with the provided email and password.
      requestBody:
        description: User role change details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Role changed successfully
          content:
            application/json:
              example:
                message: "Successfully changed role"

#Payments 
  /customer/payments/buy:
    post:
      summary: Buy Product
      security:
        - bearerAuth: []
      requestBody:
        description: Product purchase details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                customerId:
                  type: integer
                cardNum:
                  type: string
      responses:
        '201':
          description: Successfully purchased product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Successfully done"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid card details"

  /customer/payments/payment-history/{customerId}:
    get:
      summary: View Payment History
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: The ID of the customer.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Id:
                      type: integer
                    customerId:
                      type: integer
                    product:
                      type: object
                      properties:
                        // Define the properties of the product
                    status:
                      type: string
                    accesCode:
                      type: integer
                    card:
                      type: string
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Customer not found"

  /customer/search/search:
    get:
      summary: Search for products 
       parameters:
       - in: query
         name: searchText
         required: true
         description: The text to search for in product names.
          schema:
            type: string
      responses:
        "200":
          description: A list of products matching the search criteria.
          content:
            application/json:
       

  #Rate      

  /customer/rate/{customerId}:
    post:
      summary: Give a rating to a product
      security:
        - bearerAuth: []
      parameters:
        - name: customerId
          in: path
          description: The ID of the customer giving the rating.
          required: true
          schema:
            type: integer
      requestBody:
        description: Rating details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rate:
                  type: integer
                description:
                  type: string
                productId:
                  type: integer
      responses:
        "201":
          description: Rating added successfully
          content:
            application/json:
              example:
                message: "Rate added"
        "404":
          description: Customer or product not found
          content:
            application/json:
              example:
                message: "Customer or product not found"
        "500":
          description: An error occurred while processing the rating
          content:
            text/plain:
              example: An error occurred while processing the rating

  
  #Saved products 
  /customer/saved/save-product:
    post:
      summary: Save a product
      description: Save a product to the user's list of saved products.
      requestBody:
        description: Product save details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                customerId:
                  type: integer
      responses:
        '201':
          description: Product saved successfully
          content:
            application/json:
              example:
                message: "Saved"
        '404':
          description: Customer or product not found
          content:
            application/json:
              example:
                message: "Customer or product not found"
        '500':
          description: An error occurred while saving the product
          content:
            text/plain:
              example: An error occurred while saving the product

  /customer/saved/remove-product:
      summary: Remove a saved product
      description: Remove a product from the user's list of saved products.
      requestBody:
        description: Product removal details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId:
                  type: integer
                savedProductId:
                  type: integer
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              example:
                message: "Removed successfully"
        '404':
          description: Customer or saved product not found
          content:
            application/json:
              example:
                message: "Customer or saved product not found"
        '500':
          description: An error occurred while removing the product
          content:
            text/plain:
              example: An error occurred while removing the product

  /customer/saved/get-all-saved/{customerId}:
    get:
      summary: Get saved products of a customer
      description: Get a list of products saved by a specific customer.
      parameters:
        - name: customerId
          in: path
          description: The ID of the customer.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of saved products
          content:
            application/json:
              schema:
                type: object
                properties:
                  savedProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        // Define the properties of the saved product
              example:
                savedProducts: []
        '404':
          description: Customer not found
          content:
            application/json:
              example:
                message: "Customer not found"
        '500':
          description: An error occurred while retrieving saved products
          content:
            text/plain:
              example: An error occurred while retrieving saved products


  /salesman/auth/create-account:
    post:
      summary: Create a new salesperson account
      description: Create a new salesperson account with the provided details.
      requestBody:
        description: Salesperson account creation details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                phoneNumber:
                  type: string
                cardInfo:
                  type: object
                addressInfo:
                  type: object
                 
      responses:
        '201':
          description: Salesperson account created successfully
          content:
            application/json:
        '409':
          description: Account already exists
          content:
            application/json:
              example:
                message: "Account already exists"

  /salesman/auth/login-account:
    post:
      summary: Log in to a salesperson account
      description: Log in to a salesperson account with the provided phone number and password.
      requestBody:
        description: Salesperson login details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              example:
                message: "Logged in successfully"
                salesmanInfo:
                  Id: 1
                  name: "John Doe"
                  phoneNumber: "+1234567890"
                  cardInfo:
                    // Define the properties of the cardInfo object
                  addressInfo:
                    // Define the properties of the addressInfo object
                  role: "salesman"
                  token: "newToken123"
        '404':
          description: Account not found
          content:
            application/json:
              example:
                message: "Account not found"
        '409':
          description: Invalid password
          content:
            application/json:
             
  /salesman/auth/logout-account/{salesmanId}:
    put:
      summary: Log out of a salesperson account
      description: Log out of a salesperson account by clearing the authentication token.
      parameters:
        - name: salesmanId
          in: path
          description: The ID of the salesperson.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              example:
                message: "Logged out successfully"
        '404':
          description: Salesperson not found
          content:
            application/json:
              example:
                message: "Salesperson not found"


  /salesman/products/create-product:
    post:
      summary: Create a new product
      description: Create a new product with the provided details.
      security:
        - bearerAuth: []
        - role: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            description: Bearer token
      requestBody:
        description: Product creation details
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                productName:
                  type: string
                productPrice:
                  type: number
                productDescription:
                  type: string
                salesManId:
                  type: integer
                releasedDate:
                  type: string
                  format: date
                expirationDate:
                  type: string
                  format: date
                count:
                  type: integer
                categoryName:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              example:
                message: "Product created successfully"

  /salesman/products/all-products:
    get:
      summary: Get all products
      description: Get a list of all products with details.
      security:
        - bearerAuth: []
        - role: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            description: Bearer token
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  productsData:
                    type: array
                    items:
                      type: object
                      properties:
                        // Define the properties of the product object
              example:
                productsData: []

  /salesman/products/get-salesman-products/{salesManId}:
    get:
      summary: Get seller products
      description: Get a list of products associated with a specific salesperson.
      security:
        - bearerAuth: []
        - role: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            description: Bearer token
        - name: salesManId
          in: path
          description: The ID of the salesperson.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of seller products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    // Define the properties of the seller product object
              example:
                sellerProducts: []

  /salesman/products/update-product/{salesManId}/{productId}:
    put:
      summary: Update product
      description: Update details of a specific product.
      security:
        - bearerAuth: []
        - role: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            description: Bearer token
        - name: salesManId
          in: path
          description: The ID of the salesperson.
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated product details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productBody:
                  type: object
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  // Define the properties of the updated product
              example:
                // Example of updated product data

  /salesman/products/delete-product/{salesManId}/{productId}:
    delete:
      summary: Delete product
      description: Delete a specific product.
      security:
        - bearerAuth: []
        - role: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            description: Bearer token
        - name: salesManId
          in: path
          description: The ID of the salesperson.
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              example:
                message: "Deleted successfully"

  /salesman/products/get-product/rating/{productId}:
    get:
      summary: Get product ratings
      description: Get the ratings of a specific product.
      security:
        - bearerAuth: []
        - role: []
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            description: Bearer token
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of product ratings
          content:
            application/json:
              schema:
                type: object
                properties:
                  productRates:
                    type: array
                    items:
                      type: object
              example:
                productRates: []
        '404':
          description: Product not found or no ratings available
          content:
            application/json:
              example:
                message: "Product not found or no ratings available"
